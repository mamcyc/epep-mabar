function find_path(tile_x, tile_y)
    getBot():findPath(tile_x, tile_y)
    while not getBot():isInTile(tile_x, tile_y) do
        dynamic_sleep(1000)
        getBot():findPath(tile_x, tile_y)
    end
end
getBot().collect_range = 2

function NearFossil()
    for _, tile in pairs(getTiles()) do
        if tile.fg == 3918 then
            if #getBot():getPath(tile.x, tile.y - 1) > 0 then
                find_path(tile.x, tile.y - 1)
                return tile.x, tile.y
            else
                for y = 0, tile.y - 1 do
                    if getTile(tile.x, y).fg > 0 then
                        find_path(tile.x, y - 1)
                        while getTile(tile.x, y).fg > 0 do
                            getBot():hit(tile.x, y)
                            dynamic_sleep(270)
                        end
                        find_path(tile.x, y)
                    end
                end
                return tile.x, tile.y
            end
        end
    end
end

function PryFossil(tile_x, tile_y)
    tries = 0
    while getTile(tile_x, tile_y).flags ~= 64 do
        print(getTile(tile_x, tile_y).flags)
        tries = tries + 1
        getBot():hit(tile_x, tile_y)
        dynamic_sleep(800)
        if tries >= 10 then
            dynamic_sleep(5000)
            tries = 0
        end
    end
end

function GougeFossil(tile_x, tile_y)
    while getTile(tile_x, tile_y).fg == 3918 do
        getBot():hit(tile_x, tile_y)
        dynamic_sleep(500)
    end
end

function take_item()
    getBot():warp(storage.name, storage.door)
    while not getBot():isInWorld(storage.name:upper()) do
        dynamic_sleep(1000)
    end

    for _, object in pairs(getObjects()) do
        if (object.id == 3932 and getInventory():getItemCount(3932) == 0) or (object.id == 3934 and getInventory():getItemCount(3934) == 0) or (object.id == 4132) then
            local obj_x = object.x // 32
            local obj_y = object.y // 32

            if #getBot():getPath(obj_x, obj_y) > 0 then
                find_path(obj_x, obj_y)
                dynamic_sleep(100)
                while not getBot():isInTile(obj_x, obj_y) do
                    find_path(obj_x, obj_y)
                    dynamic_sleep(5000)
                end
            else
                for i = -1, 1 do
                    if #getBot():getPath(obj_x + i, obj_y) > 0 then
                        find_path(obj_x + i, obj_y)
                        dynamic_sleep(1500)
                        while not getBot():isInTile(obj_x + i, obj_y) do
                            find_path(obj_x + i, obj_y)
                            dynamic_sleep(5000)
                        end
                        break
                    end
                end
            end
            dynamic_sleep(1000)
            getBot():collectObject(object.oid, 3)
            dynamic_sleep(5000)

            if object.id == 3932 then
                getBot():drop(3932, getInventory():getItemCount(3932) - 1)
                dynamic_sleep(5000)
            elseif object.id == 3934 then
                getBot():drop(3934, getInventory():getItemCount(3934) - 1)
                dynamic_sleep(5000)
            end
        end
    end
end

function scan_item(item_id, param)
    if param then
        for id, count in pairs(getBot():getWorld().growscan:getTiles()) do
            if id == item_id then
                return count
            end
        end
        return 0
    end
    for id, count in pairs(getBot():getWorld().growscan:getObjects()) do
        if id == item_id then
            return count
        end
    end


    return 0
end

function useHammer()
    getBot():wear(3932)
    sleep(200)
    while not getInventory():getItem(3932).isActive do
        getBot():wear(3932)
        dynamic_sleep(2500)
    end
end

function useChisel()
    getBot():wear(3934)
    sleep(200)
    while not getInventory():getItem(3934).isActive do
        getBot():wear(3934)
        dynamic_sleep(2500)
    end
end

function unuseChisel()
    while getInventory():getItem(3934).isActive do
        getBot():unwear(3934)
        dynamic_sleep(2500)
    end
end

function get_fossils()
    if getBot():getInventory():getItemCount(4132) == 0 then
        take_item()
        getBot():warp(_G.worlds, _G.door)
        while not getBot():isInWorld(_G.worlds:upper()) do
            dynamic_sleep(1000)
        end
    end
    tile_x, tile_y = NearFossil()
    getBot():say("Found At " .. tile_x .. ":" .. tile_y)
    find_path(tile_x, tile_y - 1)
    useHammer()
    PryFossil(tile_x, tile_y)
    useChisel()
    GougeFossil(tile_x, tile_y)

    if polished then
        while scan_item(3936) > 0 do
            getBot:place(tile_x, tile_y, 4132)
            dynamic_sleep(3000)
        end

        getBot().auto_collect = true
        dynamic_sleep(1000)
        getBot().auto_collect = false
    else
        getBot().auto_collect = true
        dynamic_sleep(1000)
        getBot().auto_collect = false
    end
end

function dynamic_sleep(ms)
    local ping = getBot():getPing()

    sleep_amount = math.floor(ping * 0.10 * (ms * 0.10))
    if sleep_amount <= 170 then
        sleep_amount = sleep_amount + math.random(100, ms)
    end
    sleep(sleep_amount)
end

function save_fossils()
    getBot():warp(save_world.name, save_world.door)
    dynamic_sleep(100)
    while not getBot():isInWorld(save_world.name:upper()) do
        dynamic_sleep(1000)
    end
    item = (function() if polished then return 4134 else return 3936 end end)()
    while getBot():getInventory():getItemCount(item) > 0 do
        getBot():drop(item, getBot():getInventory():getItemCount(item))
        dynamic_sleep(3000)
    end
end

function main_script()
    getBot():warp("AKSDJLADJSLAJDLSJ")
    sleep(1000)
    for _, item in pairs({ 4132, 3932, 3934 }) do
        if (getInventory():getItemCount(item) == 0 and item ~= 4132) or (item == 4132 and polished and getInventory():getItemCount(item) == 0) then
            take_item()
        end
    end
    for world in io.lines(list_world) do
        _G.worlds, _G.door = world:match("([^|]+)|([^|]+)")

        print(_G.worlds, door)
        getBot():warp(_G.worlds, door)
        while not getBot():isInWorld(_G.worlds:upper()) do
            dynamic_sleep(1000)
        end
        if scan_item(3918, true) > 0 then
            for i = 1, scan_item(3918, true) do
                get_fossils()
            end
            unuseChisel()
            save_fossils()
        end
    end
    getBot().auto_reconnect = false
    getBot():disconnect()
end

main_script()
